ΤΙ ΜΕΝΕΙ ΓΙΑ WEB





1) αλλαγη στον κωδικα σε ονοματα μεταβλητων
2) css για στατιστικα 
3) Τι γινεται με τα events
   

ΠΑΡΑΔΟΧΕΣ


- Τα json αρχεια εχουν υποστει επεξεργασια για να μπουν στη βαση μας
- Τα shops εχουν ολα διαφορετικη ονομασια και οσα εχουν ιδιο ονομα, εχουν αριθμηση για να γινεται το search σωστα
- Τα subcategory μπηκαν χειροκινητα
- Η αποσταση για υποβολη προσφορας αντι για 50 μετρα ειναι 1500 μετρα λογω των περιοχων που ζουμε(δεν εχει πολλα supermarket κοντα)
- Ενας χρηστης παιρνει ποντους οταν η προσφορα που δημοσιευει εχει 20% μικροτερη τιμη απο τον μεσο ορο των τιμων του προιοντος σε 5 μερες(απο τον πινακα price_variety)
- 

==========================================================================================================================================================================

DELIMITER $

CREATE TRIGGER update_shop_offers
AFTER INSERT ON offer
FOR EACH ROW
BEGIN
    UPDATE shop
    SET offers = 1
    WHERE shop_id = NEW.shop_id;
END;
$

DELIMITER ;


==========================================================================================================================================================================

DELIMITER $

CREATE TRIGGER update_shop_offers_on_delete
AFTER DELETE ON offer
FOR EACH ROW
BEGIN
    DECLARE shop_offer_count INT;
    SET shop_offer_count = (SELECT COUNT(*) FROM offer WHERE shop_id = OLD.shop_id);
    
    IF shop_offer_count = 0 THEN
        UPDATE shop
        SET offers = 0
        WHERE shop_id = OLD.shop_id;
    END IF;
END;
$

DELIMITER ;


==========================================================================================================================================================================

DELIMITER $

CREATE TRIGGER likes_add_points
AFTER UPDATE ON OFFER
FOR EACH ROW 
BEGIN
UPDATE USER
SET total_score = total_score + 5
WHERE (NEW.likes = OLD.likes + 1 AND USER.user_username = NEW.user_username);
END$

DELIMITER ;


==========================================================================================================================================================================

DELIMITER $
CREATE TRIGGER dislikes_subtracts_points
AFTER UPDATE ON OFFER
FOR EACH ROW 
BEGIN
UPDATE USER
SET total_score = total_score - 1
WHERE (NEW.dislikes = OLD.dislikes + 1 AND USER.user_username = NEW.user_username); 
END$
DELIMITER ;


========================================================================================================================

DELIMITER $
CREATE TRIGGER update_points_after_offer
AFTER INSERT ON offer
FOR EACH ROW
BEGIN
    DECLARE lowest_price DOUBLE;
    DECLARE p_id INT;
    
    SELECT product_id INTO p_id
    FROM product
    WHERE product_name = NEW.product_name;
    
    SET lowest_price = (
        SELECT MIN(price)
        FROM price_variety
        WHERE p_id = product_id
    );
    
    IF NEW.price < (lowest_price * 0.8) THEN
        UPDATE user
        SET total_score = total_score + 50
        WHERE user_username = NEW.user_username;
    END IF;
END;
$
DELIMITER ;



===================================================================================================================

SET GLOBAL event_scheduler = ON;
DELIMITER $
CREATE EVENT delete_old_offers
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    DELETE FROM offer
    WHERE register_date <= DATE_SUB(NOW(), INTERVAL 7 DAY);
END;
$
DELIMITER ;


====================================================================================================================


DELIMITER $
CREATE TRIGGER give_tokens_to_new_user
BEFORE INSERT ON user
FOR EACH ROW
BEGIN
    SET NEW.total_tokens = 100;
END;
$
DELIMITER ;

====================================================================================================================
-- Trigger to update likes or dislikes AFTER INSERT on the user_like_dislike table
DELIMITER $
CREATE TRIGGER `increment_user_likes_dislikes_after_insert` 
AFTER INSERT ON `user_like_dislike`
FOR EACH ROW 
BEGIN
    -- If the action is a like
    IF NEW.action = 'like' THEN
        UPDATE `user` SET `likes` = `likes` + 1 WHERE `user_id` = NEW.user_id;
    ELSE
        UPDATE `user` SET `dislikes` = `dislikes` + 1 WHERE `user_id` = NEW.user_id;
    END IF;
END;
$
=======================================================================================================================================================

-- Trigger to update likes or dislikes AFTER DELETE on the user_like_dislike table

DELIMITER $
CREATE TRIGGER `decrement_user_likes_dislikes_after_delete` 
AFTER DELETE ON `user_like_dislike`
FOR EACH ROW 
BEGIN
    -- If the action was a like
    IF OLD.action = 'like' THEN
        UPDATE `user` SET `likes` = `likes` - 1 WHERE `user_id` = OLD.user_id;
    ELSE
        UPDATE `user` SET `dislikes` = `dislikes` - 1 WHERE `user_id` = OLD.user_id;
    END IF;
END;
$
DELIMITER ;

=======================================================================================================================================================

DELIMITER $
CREATE TRIGGER update_user_offers
AFTER INSERT ON offer FOR EACH ROW
BEGIN
    UPDATE user
    SET offers = offers + 1
    WHERE user_username = NEW.user_username;
END;
$
DELIMITER ;







